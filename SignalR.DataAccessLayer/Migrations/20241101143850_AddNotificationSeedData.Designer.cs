// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SignalR.DataAccessLayer.Concrete;

#nullable disable

namespace SignalR.DataAccessLayer.Migrations
{
    [DbContext(typeof(SignalRContext))]
    [Migration("20241101143850_AddNotificationSeedData")]
    partial class AddNotificationSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.About", b =>
                {
                    b.Property<int>("AboutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AboutId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AboutId");

                    b.ToTable("Abouts");

                    b.HasData(
                        new
                        {
                            AboutId = 1,
                            Description = "Biz Lezzet Ustasıyız, çünkü her tabakta kaliteyi, tutkuyu ve taze malzemeleri bir araya getiriyoruz. Müşterilerimize sadece yemek sunmuyor, unutulmaz bir lezzet deneyimi yaşatıyoruz. Geleneksel tariflerimizi modern dokunuşlarla harmanlayarak, her damağa hitap eden benzersiz lezzetler yaratıyoruz. Bizim için yemek, bir sanattır ve her öğünde bu sanatı yansıtıyoruz. Lezzet yolculuğumuza katılın ve tadı damağınızda kalacak deneyimlerin keyfini çıkarın.",
                            ImageUrl = "/feane-1.0.0/images/about-img.png",
                            Title = "Biz Lezzet Ustasıyız"
                        });
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.Basket", b =>
                {
                    b.Property<int>("BasketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BasketId"), 1L, 1);

                    b.Property<decimal>("Count")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MenuTableId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BasketId");

                    b.HasIndex("MenuTableId");

                    b.HasIndex("ProductId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonCount")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingId = 1,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rezervasyon Alındı",
                            Mail = "AhmetOzturk@gmail.com",
                            Name = "Ahmet Öztürk",
                            PersonCount = 2,
                            Phone = "12345678"
                        },
                        new
                        {
                            BookingId = 2,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rezervasyon Onaylandı",
                            Mail = "MehmetYildiz@gmail.com",
                            Name = "Mehmet Yıldız",
                            PersonCount = 3,
                            Phone = "12345678"
                        },
                        new
                        {
                            BookingId = 3,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rezervasyon İptal Edildi",
                            Mail = "EmineKayali@gmail.com",
                            Name = "Emine Kayalı",
                            PersonCount = 4,
                            Phone = "12345678"
                        });
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Hamburger",
                            Status = true
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Pizza",
                            Status = true
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Makarna",
                            Status = true
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Kızarmalar",
                            Status = true
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Salata",
                            Status = true
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Tatlı",
                            Status = true
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryName = "İçecek",
                            Status = true
                        });
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"), 1L, 1);

                    b.Property<string>("FooterDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenDays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenDaysDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenHours")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            ContactId = 1,
                            FooterDescription = "Lezzetli yemeklerimizi denemek veya restoranımız hakkında bilgi almak için bizimle iletişime geçmekten çekinmeyin.Siz değerli misafirlerimize en iyi hizmeti sunabilmek için her zaman buradayız.Rezervasyonlular,özel etkinlikler,menü bilgileri veya diğer talebleriniz için aşağıdak iletişim kanallarından bize ulaşabilirsiniz.",
                            FooterTitle = "M&Y Restoran",
                            Location = "https://yandex.com.tr/harita/org/cumhuriyet_meydani_parki/79938228122/?utm_medium=mapframe&utm_source=maps",
                            Mail = "Restoran@gmail.com",
                            OpenDays = "Çalışma Saatlerimiz",
                            OpenDaysDescription = "Sabah 10:00 Akşam 22:00",
                            OpenHours = "Haftanın 7 Günü",
                            Phone = "Ara +90 500 000 00 00 "
                        });
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"), 1L, 1);

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiscountId");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            DiscountId = 1,
                            Amount = "20",
                            Description = "Sevdiğiniz hamburgerlerin tadını çıkarmanız için harika bir fırsat!",
                            ImageUrl = "/feane-1.0.0/images/o1.jpg",
                            Status = true,
                            Title = "Hamburger Günleri"
                        },
                        new
                        {
                            DiscountId = 2,
                            Amount = "15",
                            Description = "Tüm pizzalarımızda %20 indirim fırsatı sizleri bekliyor",
                            ImageUrl = "/feane-1.0.0/images/o2.jpg",
                            Status = true,
                            Title = "Pizza Günleri"
                        });
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.MenuTable", b =>
                {
                    b.Property<int>("MenuTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuTableId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("MenuTableId");

                    b.ToTable("MenuTables");

                    b.HasData(
                        new
                        {
                            MenuTableId = 1,
                            Name = "Bahçe 01",
                            Status = false
                        },
                        new
                        {
                            MenuTableId = 2,
                            Name = "Bahçe 02",
                            Status = false
                        },
                        new
                        {
                            MenuTableId = 3,
                            Name = "Bahçe 03",
                            Status = false
                        },
                        new
                        {
                            MenuTableId = 4,
                            Name = "Bahçe 04",
                            Status = false
                        },
                        new
                        {
                            MenuTableId = 5,
                            Name = "Bahçe 05",
                            Status = false
                        },
                        new
                        {
                            MenuTableId = 6,
                            Name = "Bahçe 06",
                            Status = false
                        },
                        new
                        {
                            MenuTableId = 7,
                            Name = "Bahçe 07",
                            Status = false
                        },
                        new
                        {
                            MenuTableId = 8,
                            Name = "Bahçe 08",
                            Status = false
                        },
                        new
                        {
                            MenuTableId = 9,
                            Name = "Bahçe 09",
                            Status = false
                        });
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.MoneyCase", b =>
                {
                    b.Property<int>("MoneyCaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MoneyCaseId"), 1L, 1);

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MoneyCaseId");

                    b.ToTable("MoneyCases");
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yeni Bir Kullanıcı Eklendi",
                            Icon = "la la-user-plus",
                            Status = false,
                            Type = "notif-icon notif-primary"
                        },
                        new
                        {
                            NotificationId = 2,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yorum Yapıldı",
                            Icon = "la la-comment",
                            Status = false,
                            Type = "notif-icon notif-success"
                        },
                        new
                        {
                            NotificationId = 3,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kullanıcı Beğendi",
                            Icon = "la la-heart",
                            Status = false,
                            Type = "notif-icon notif-danger"
                        });
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("Date");

                    b.Property<string>("TableNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ProductStatus")
                        .HasColumnType("bit");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Description = "Taze malzemelerle hazırlanan hamburgerlerimiz, her ısırıkta eşsiz bir lezzet sunuyor. Klasik ve gurme seçeneklerimizle, damak tadınıza hitap eden bir deneyim yaşamaya davetlisiniz!",
                            ImageUrl = "/feane-1.0.0/images/f8.png",
                            Price = 350m,
                            ProductName = "Burger",
                            ProductStatus = true
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Description = "Taze malzemelerle hazırlanan hamburgerlerimiz, her ısırıkta eşsiz bir lezzet sunuyor. Klasik ve gurme seçeneklerimizle, damak tadınıza hitap eden bir deneyim yaşamaya davetlisiniz!",
                            ImageUrl = "/feane-1.0.0/images/f2.png",
                            Price = 250m,
                            ProductName = "Hamburger",
                            ProductStatus = true
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 3,
                            Description = "İtalya’nın klasik lezzetlerinden ilham alarak, çeşitli soslarla mükemmel uyum sağlayan makarnalarla sofralarınızı şenlendirin. Kolay hazırlanabilir ve doyurucu çeşitler, her öğün için ideal!",
                            ImageUrl = "/feane-1.0.0/images/f4.png",
                            Price = 150m,
                            ProductName = "Makarna",
                            ProductStatus = true
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 5,
                            Description = "Taptaze malzemelerle hazırlanan, sağlıklı ve hafif salata çeşitleriyle sofralarınıza renk katın. Mevsim yeşillikleri ve özel soslarla her damak tadına hitap eden lezzetler burada!",
                            ImageUrl = "/feane-1.0.0/images/f10.png",
                            Price = 70m,
                            ProductName = "Salata",
                            ProductStatus = true
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 6,
                            Description = "En tatlı anlarınıza eşlik edecek nefis tatlı seçenekleriyle gününüzü güzelleştirin. Çikolatalı, meyveli ve geleneksel tatlarla damaklarda unutulmaz bir lezzet şöleni!",
                            ImageUrl = "/feane-1.0.0/images/f11.png",
                            Price = 350m,
                            ProductName = "Tatlı",
                            ProductStatus = true
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 7,
                            Description = "Serinletici ve ferahlatıcı içeceklerle her yudumda tazelenin! Doğal meyve sularından sıcak içeceklere, her zevke uygun seçenekler sizi bekliyor.",
                            ImageUrl = "/feane-1.0.0/images/f12.png",
                            Price = 125m,
                            ProductName = "İçecek",
                            ProductStatus = true
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 4,
                            Description = "Altın sarısı, çıtır çıtır kızartmalarla atıştırmalık keyfinizi artırın. Patates, sebze ve tavuk çeşitleriyle lezzet dolu anlar için mükemmel bir tercih!",
                            ImageUrl = "/feane-1.0.0/images/f5.png",
                            Price = 235m,
                            ProductName = "Kızartma",
                            ProductStatus = true
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2,
                            Description = "İtalyan mutfağının en sevilen lezzetlerinden biri olan pizzalar, zengin malzemeleriyle damak çatlatıyor. İnce hamur veya kalın taban seçenekleriyle herkesin favorisi olmaya aday!",
                            ImageUrl = "/feane-1.0.0/images/f3.png",
                            Price = 335m,
                            ProductName = "Pizza",
                            ProductStatus = true
                        });
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.Slider", b =>
                {
                    b.Property<int>("SliderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SliderId"), 1L, 1);

                    b.Property<string>("Description1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SliderId");

                    b.ToTable("Sliders");

                    b.HasData(
                        new
                        {
                            SliderId = 1,
                            Description1 = "Taze ve özenle hazırlanmış lezzetli makarnalarımız, zengin sos seçenekleriyle birleşerek her lokmada unutulmaz bir deneyim sunuyor. İster klasik ister yaratıcı tariflerimizle damak tadınıza hitap eden makarnalarımızı mutlaka denemelisiniz!",
                            Description2 = "Zengin aromalar ve taze malzemelerle hazırlanan Uzak Doğu mutfağı, eşsiz lezzetleriyle damaklarda iz bırakıyor. Sushi'den ramen'e, dim sum'dan curry'ye kadar geniş bir yelpazeye sahip bu mutfak, gastronomi tutkunları için keşfedilmeyi bekliyor!",
                            Description3 = "Renkli ve lezzet dolu yemekleriyle tanınır; taze malzemeler ve baharatlarla hazırlanan harika tarifler sunar.\r\nTacos, enchiladas ve nachos gibi ikonik lezzetler, her lokmada benzersiz bir tat deneyimi yaşatır.\r\nGeleneksel tarifler ve modern dokunuşlarla, bu mutfak her damak zevkine hitap eden bir fiesta sunuyor!",
                            Title1 = "Lezetli Makarnalar",
                            Title2 = "Uzak Doğu Mutfağı",
                            Title3 = "Meksika Mutfağı"
                        });
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.SocialMedia", b =>
                {
                    b.Property<int>("SocialMediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SocialMediaId"), 1L, 1);

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SocialMediaId");

                    b.ToTable("SocialMedias");

                    b.HasData(
                        new
                        {
                            SocialMediaId = 1,
                            Icon = "fa fa-facebook",
                            Title = "Facebook",
                            Url = "https://tr-tr.facebook.com/login/"
                        },
                        new
                        {
                            SocialMediaId = 2,
                            Icon = "fa fa-twitter",
                            Title = "X",
                            Url = "https://x.com/"
                        },
                        new
                        {
                            SocialMediaId = 3,
                            Icon = "fa fa-instagram",
                            Title = "İnstagram",
                            Url = "https://www.instagram.com/?hl=tr"
                        });
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.Testimonial", b =>
                {
                    b.Property<int>("TestimonialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestimonialId"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestimonialId");

                    b.ToTable("Testimonials");

                    b.HasData(
                        new
                        {
                            TestimonialId = 1,
                            Comment = "Bu restoran, özgün lezzetleri ve yaratıcı sunumlarıyla gastronomi tutkunlarının buluşma noktası. Her detay özenle düşünülmüş, mekanın atmosferi ise deneyimi tamamlıyor.",
                            ImageUrl = "/feane-1.0.0/images/client1.jpg",
                            Name = "Yeliz",
                            Status = true,
                            Title = "Gurme"
                        },
                        new
                        {
                            TestimonialId = 2,
                            Comment = "Bu tabak, görsel bir şölen sunarken, her lokmada yoğun bir tat deneyimi yaşatıyor. Malzemelerin tazeliği ve dikkatle seçilmiş baharatlar, damakta unutulmaz bir iz bırakıyor. Sunumundaki zarafet ise, yemeği bir sanat eserine dönüştürüyor.",
                            ImageUrl = "/feane-1.0.0/images/client2.jpg",
                            Name = "Ahmet",
                            Status = true,
                            Title = "Gurme"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("SignalR.EntityLayer.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SignalR.EntityLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SignalR.EntityLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("SignalR.EntityLayer.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalR.EntityLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SignalR.EntityLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.Basket", b =>
                {
                    b.HasOne("SignalR.EntityLayer.Entities.MenuTable", "MenuTable")
                        .WithMany("Baskets")
                        .HasForeignKey("MenuTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalR.EntityLayer.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuTable");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.OrderDetail", b =>
                {
                    b.HasOne("SignalR.EntityLayer.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalR.EntityLayer.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.Product", b =>
                {
                    b.HasOne("SignalR.EntityLayer.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.MenuTable", b =>
                {
                    b.Navigation("Baskets");
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SignalR.EntityLayer.Entities.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
